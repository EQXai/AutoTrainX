# AutoTrainX CI/CD Pipeline
# Continuous Integration and Testing

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Bandit security linter
        run: |
          pip install bandit[toml]
          bandit -r src/ api/ -f json -o bandit-report.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            trivy-results.sarif
            bandit-report.json

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install -r api/requirements.txt

      - name: Run Black formatter check
        run: black --check --diff .

      - name: Run Ruff linter
        run: ruff check . --output-format=github

      - name: Run MyPy type checker
        run: mypy src/ api/ --ignore-missing-imports

      - name: Check import sorting with isort
        run: |
          pip install isort
          isort --check-only --diff .

  # Unit tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', 'api/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install -r api/requirements.txt
          pip install pytest pytest-asyncio pytest-cov httpx

      - name: Create test environment
        run: |
          mkdir -p test_workspace/{input,output,Presets}
          mkdir -p test_logs
          mkdir -p test_DB
          cp -r Presets/* test_workspace/Presets/

      - name: Run unit tests
        env:
          ENVIRONMENT: test
          DATABASE_URL: sqlite:///test_DB/test.db
          WORKSPACE_PATH: ./test_workspace
          REDIS_URL: redis://localhost:6379
        run: |
          pytest tests/ -v \
            --cov=src \
            --cov=api \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junit-xml=pytest-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            pytest-results.xml
            htmlcov/
            .coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # API integration tests
  api-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Build Docker image for testing
        run: |
          docker build \
            --target development \
            --tag autotrainx-api:test \
            .

      - name: Start test services
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d api redis
          sleep 30

      - name: Wait for API to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

      - name: Run API integration tests
        run: |
          pip install httpx pytest pytest-asyncio
          python -m pytest tests/integration/ -v

      - name: Check API documentation
        run: |
          curl -f http://localhost:8000/docs
          curl -f http://localhost:8000/openapi.json

      - name: Collect logs
        if: always()
        run: |
          docker-compose logs > docker-logs.txt

      - name: Upload logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-logs
          path: docker-logs.txt

      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [api-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and start services
        run: |
          docker build --target production --tag autotrainx-api:perf .
          docker-compose up -d api redis
          sleep 30

      - name: Install performance testing tools
        run: |
          sudo apt-get update
          sudo apt-get install -y apache2-utils
          pip install locust

      - name: Run load tests
        run: |
          # Simple load test with ab
          ab -n 100 -c 10 http://localhost:8000/health
          
          # More comprehensive tests with Locust (if locustfile exists)
          if [ -f "tests/performance/locustfile.py" ]; then
            locust -f tests/performance/locustfile.py --headless -u 10 -r 2 -t 60s --host http://localhost:8000
          fi

      - name: Cleanup
        if: always()
        run: docker-compose down -v

  # Build and push Docker images
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [security-scan, test, api-tests]
    if: github.event_name == 'push'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            autotrainx/api
            ghcr.io/${{ github.repository_owner }}/autotrainx-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-image-results.sarif'

  # Notify on completion
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: always()

    steps:
      - name: Notify Slack on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#autotrainx-ci'
          text: '✅ CI pipeline completed successfully for ${{ github.ref }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#autotrainx-ci'
          text: '❌ CI pipeline failed for ${{ github.ref }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
# Prometheus configuration for AutoTrainX monitoring
global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'autotrainx'
    environment: 'production'

# Rule files
rule_files:
  - "alert_rules.yml"

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

# Scrape configurations
scrape_configs:
  # Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    scrape_interval: 30s
    metrics_path: '/metrics'

  # AutoTrainX API
  - job_name: 'autotrainx-api'
    static_configs:
      - targets: ['api:9090']  # Docker Compose
      # - targets: ['autotrainx-api-service:9090']  # Kubernetes
    scrape_interval: 15s
    metrics_path: '/metrics'
    honor_labels: true
    scrape_timeout: 10s

  # Redis monitoring
  - job_name: 'redis'
    static_configs:
      - targets: ['redis:6379']
    scrape_interval: 30s
    metrics_path: '/metrics'

  # Node Exporter (system metrics)
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']
    scrape_interval: 15s
    metrics_path: '/metrics'
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '([^:]+)(:[0-9]+)?'
        replacement: '${1}'

  # cAdvisor (container metrics)
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']
    scrape_interval: 15s
    metrics_path: '/metrics'
    honor_labels: true

  # Docker daemon metrics
  - job_name: 'docker'
    static_configs:
      - targets: ['host.docker.internal:9323']
    scrape_interval: 30s
    metrics_path: '/metrics'

  # Nginx metrics (if nginx-prometheus-exporter is used)
  - job_name: 'nginx'
    static_configs:
      - targets: ['nginx-exporter:9113']
    scrape_interval: 15s
    metrics_path: '/metrics'

  # Application-specific metrics
  - job_name: 'autotrainx-training-jobs'
    static_configs:
      - targets: ['api:9090']
    scrape_interval: 5s
    metrics_path: '/metrics'
    params:
      format: ['prometheus']
    metric_relabel_configs:
      # Only collect training-related metrics
      - source_labels: [__name__]
        regex: 'autotrainx_training_.*'
        action: keep

  # Health check endpoints
  - job_name: 'health-checks'
    static_configs:
      - targets: ['api:8000']
    scrape_interval: 10s
    metrics_path: '/health'
    params:
      format: ['prometheus']

# Storage configuration
storage:
  tsdb:
    path: /prometheus
    retention.time: 30d
    retention.size: 10GB
    wal-compression: true

# Remote write (for long-term storage)
# remote_write:
#   - url: "https://prometheus-remote-write.example.com/api/v1/write"
#     basic_auth:
#       username: "username"
#       password: "password"

# Query log
# query_log_file: /prometheus/query.log